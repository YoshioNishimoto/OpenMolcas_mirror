.. index::
   single: Program; MPPROP
   single: MPPROP

.. _UG\:sec\:mpprop:

:program:`mpprop`
=================

.. only:: html

  .. contents::
     :local:
     :backlinks: none

.. _UG\:sec\:mpprop_description:

Description
-----------

.. xmldoc:: %%Description:
            The MpProp program generates a distributed multipole expansion of the charge density
            of a molecule and atom distributed polarizabilities.

The :program:`MPPROP` is a general distributed multipole expansion, and a first order polarizabilty analysis program.
It will use the one electron integrals to generate the distribution. The order of the distributed multipole expansion is defined by
:program:`SEWARD`. In order to generate distributed multipoles of higher order than 2. One has to use the Keyword
MULTipoles in :program:`SEWARD`. :program:`SEWARD` also needs the Keyword NEMO to arrange the integrals in correct order.

.. _UG\:sec\:mpprop_dependencies:

Dependencies
------------

The :program:`MPPROP` program requires the one-electron integral file
:file:`ONEINT` and the communications file :file:`RUNFILE`,
which contains among others the
multipole integrals produced by :program:`SEWARD`.

.. index::
   pair: Files; MPPROP

.. _UG\:sec\:mpprop_files:

Files
-----

Below is a list of the files that are used/created by the program
:program:`MPPROP`.

Input files
...........

.. class:: filelist

:file:`ONEINT`
  One-electron integral file generated by the program :program:`SEWARD`.

:file:`RUNFILE`
  File for communication of auxiliary information generated by the different programs
  e.g. :program:`SEWARD`.

:file:`INPORB`
  :file:`SCFORB` or :file:`RASORB` file containing the orbitals of a previous
  :program:`SCF` run or a :program:`RASSCF` run, which are used now as vectors in the :program:`MPPROP` run.

Output files
............

.. class:: filelist

:file:`MPPROP`
  The distributed multipole expansion.

.. index::
   pair: Input; MPPROP

.. _UG\:sec\:mpprop_input:

Input
-----

Below follows a description of the input to :program:`MPPROP`. The keywords
are always significant to four characters, but in order to make the
input more transparent, it is recommended to use the full keywords.
The :program:`MPPROP` program section of the |molcas| input starts with the
program: ::

  &MPPROP

There are no compulsory keywords.

Optional general keywords
.........................

.. class:: keywordlist

:kword:`BONDs`
  Use this Keyword to define bond between atoms.
  This Keyword should be followed by a line of atomlabels
  separated by a space. The following line can define
  another bond. This Keyword should be ended by a END statement
  in the last line. The example below means that O1 will bond to H1 and H2.
  It does not mean that H1 is bonded to H2. ::

    BOND
    O1 H1 H2
    END

  .. xmldoc:: %%Keyword: BONDs <basic>
              Use this Keyword to define bond between atoms.
              This Keyword should be followed by a line of atomlabels
              separated by a space. The following line can define
              another bond. This Keyword should be ended by a END statement
              in the last line. The example below means that O1 will bond to H1 and H2.
              It does not mean that H1 is bonded to H2.

:kword:`TITLe`
  This Keyword specifies the title of the molecule. This will be
  recognized by the Nemo package. And you are requested to use
  this Keyword. It is defined in the program as a Character*80.

  .. xmldoc:: %%Keyword: TITLe <basic>
              This Keyword specifies the title of the molecule. This will be
              recognized by the Nemo package. And you are requested to use
              this Keyword. It is defined in the program as a Character*80

:kword:`LUMOrb`
  This Keyword tells :program:`MPPROP` to use an INPORB file for
  the one electron densities.

  .. xmldoc:: %%Keyword: LUMOrb <basic>
              This Keyword tells MPPROP to use an INPORB file for
              the one electron densities.

:kword:`TYPE`
  This is to specify the typen of the atom.
  Where the first number is the atomnumber m, counted in the order it was defined in :program:`SEWARD`.
  The second number is the type of the atom n. ::

    TYPE
    m n

  .. xmldoc:: %%Keyword: TYPE <basic>
              This is to specify the typen of the atom.
              Where the first number is the atomnumber m counted as in SEWARD.
              The second number is the type of the atom n.

:kword:`POLArizability`
  This specifies if the polarizability should be calculated or not. ::

    POLArizability
    m

  .. container:: list

    .. index::
       single: MPPROP; m=0

    **m=0** Means no polarizability should be calculated.

    .. index::
       single: MPPROP; m=1

    **m=1** (Default) Means polarizability should be calculated.

    .. 2 !not implemented! the polarizability according to the new distribution

  .. xmldoc:: %%Keyword: POLArizability <basic>
              This specifies if the polarizability should be calculated or not.
              0 Means no polarizability should be calculated.
              1 (Default) Means polarizability should be calculated.

:kword:`NONEarestAtom`
  The program is written in the way that multipoles should be moved
  to the nearest atom if the nearest atom is closer than any of the
  bonding atoms.Note that the move will be to atoms and not nearest bond.

  .. xmldoc:: %%Keyword: NONEarestAtom <basic>
              The program is written in the way that multipoles should be moved
              to the nearest atom if the nearest atom is closer than any of the
              bonding atoms. Note that the move will be to atoms and not nearest bond.
              This can be implemented if requested

:kword:`ALLCenter`
  This Keyword means that all centers are considered for the distributed multipole expansion.

  .. xmldoc:: %%Keyword: ALLCenter <basic>
              This Keyword means that all centers are considered for the distributed multipole expansion.

Limitations
...........

The limitations on the order of the multipole expansion is defined by :program:`SEWARD`.
While the polarizability can only be calculated directly in the program for an scf wavefunction.
And it is limited to first order polarizability

Input examples
..............

First we have the bare minimum of input. This will work well for all systems. ::

  &MPPROP

The next example is a bit more elaborate and show how to use
a few of the keywords. The system is formic-acid. ::

  &Gateway
  Title
  Fa
  NEMO
  Basis set
  C.ANO-L...3s2p1d.
  C1      2.15211991525414     -3.97152266198745      4.15134452433510
  End of Basis set

  Basis set
  O.ANO-L...4s3p1d.
  O2     3.99101917304681     -2.23465022227817      3.72611355598476
  O3     2.36712399248396     -5.81178517731397      5.48680572323840
  End of Basis set

  Basis set
  H.ANO-L...3s1p.
  H4      0.43787447048429     -3.44210745229883      3.08410918233085
  End of Basis set

  Basis set
  H.ANO-L...3s2p.
  H5     5.46574083366162     -2.78397269852552      4.70186773165853
  End of Basis set

  &Seward

  &Scf
  Title
  Formic-acid
  Occupied
    12

  &MPPROP
  Title
  Formic-acid
  lumorb
  POLArizability
  1
  BONDs
  C1 O2 O3 H4
  O2 H5
  End
  TYPE
  2 1
  3 2
  4 1
  5 2
  End
